{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","console","log","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","id","App","state","fetchedData","setState","this","image","src","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d928e6e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1v-q5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2Bdj5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2nku5\",\"card\":\"Cards_card__2UaCD\",\"infected\":\"Cards_infected__lSSSd\",\"recovered\":\"Cards_recovered__2UZca\",\"deaths\":\"Cards_deaths__1AsY_\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport Countup from 'react-countup';\r\nimport cx from 'classnames';\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards= ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if(!confirmed){\r\n       return 'Loading....';\r\n     }\r\n        return (\r\n            <div className={styles.container}>\r\n               <Grid container spacing={3} justify=\"center\">\r\n                 <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                   <CardContent>\r\n                   <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                   <Typography variant=\"h5\"> <Countup start={0} end={confirmed.value} duration={2.5} separator=\",\"/></Typography>\r\n                   <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                   <Typography variant=\"body\">Number of active cases of Covid</Typography>\r\n                   </CardContent>\r\n                 </Grid>\r\n                 <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                 \r\n                   <CardContent>\r\n                   <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                   <Typography variant=\"h5\"> <Countup start={0} end={recovered.value} duration={2.5} separator=\",\"/></Typography>\r\n                          <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                   <Typography variant=\"body\">Number of recoveries of Covid</Typography>\r\n                   </CardContent>\r\n                 </Grid>\r\n                 <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                 \r\n                   <CardContent>\r\n                   <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                   <Typography variant=\"h5\"> <Countup start={0} end={deaths.value} duration={2.5} separator=\",\"/></Typography>\r\n                  <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                   <Typography variant=\"body\">Number of deaths caused by Covid</Typography>\r\n                   </CardContent>\r\n                 </Grid>\r\n               </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n// const url = 'https://disease.sh/v3/covid-19/countries';\r\nconst url = 'https://covid19.mathdro.id/api';\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const { data :{ confirmed, recovered , deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n        return { confirmed, recovered , deaths, lastUpdate }\r\n        // console.log(recovered);\r\n    //    console.log( { confirmed, recovered , deaths, lastUpdate } );\r\n\r\n}\r\ncatch(error){\r\n    return error;\r\n}}\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        // console.log(data);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        })); \r\n        return modifiedData;\r\n}\r\ncatch(error){\r\n    // return error;\r\n}\r\n};\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } }= await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n        \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//  ......OR.....//\r\n//   const modifiedData = {\r\n//     confirmed: data.confirmed, \r\n//     recovered :data.recovered,\r\n//      deaths: data.deaths, \r\n//      lastUpdate: data.lastUpdate,   \r\n//  }\r\n// return modifiedData;\r\n// ......OR.....//\r\n// return {confirmed, recovered, deaths, lastUpdate};\r\n\r\n\r\n// }\r\n// catch(error){\r\n//     return error;\r\n// }\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        // console.log(dailyData);\r\n        fetchAPI();\r\n    });\r\n    const lineChart = (\r\n        dailyData.length !== 0 ? (\r\n          <Line\r\n            data={{\r\n              labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n              datasets: [{\r\n                data: dailyData.map((data) => data.confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n              }, {\r\n                data: dailyData.map((data) => data.deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                fill: true,\r\n              },  {\r\n                data: dailyData.map((data) => data.recovered),\r\n                label: 'Recovered',\r\n                borderColor: 'green',\r\n                backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n                fill: true,\r\n              },\r\n              ],\r\n            }}\r\n          />\r\n        ) : null\r\n    );\r\n    const barChart = (\r\n      confirmed\r\n      ? (\r\n        <Bar\r\n        data={{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            datasets: [{\r\n              label: 'People',\r\n              backgroundColor:['rgba(0, 0, 255, 0.5)',\r\n               'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)',\r\n              ],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text:`Current state is ${country}` },\r\n           }}\r\n        />\r\n      ) : null \r\n      )\r\n    \r\n    return (\r\n        <div className = {styles.container}>\r\n          {country ? barChart : lineChart}\r\n        </div>\r\n    );\r\n    }\r\nexport default Chart;\r\n\r\n// The state variable contains all the data and styling properties of the bar graph. The labels keyword assigns names to each bar, and the dataset sub-set contains information such as bar color, border width, ​and height of the bar.\r\n// The Bar component is rendered using <Bar /> inside the React App component. The defined state is assigned to the bar component on line 22. The options property allows further miscellaneous styling, such as the position of the heading and the chart legend.\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n      const fetchAPI = async () => {\r\n     setFetchedCountries( await fetchCountries() );\r\n      }\r\n      fetchAPI();\r\n  }, [setFetchedCountries]);\r\n  console.log(fetchedCountries);\r\n    return (\r\n      <FormControl className={styles.formControl}>\r\n          <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n              <option value=\"\">Global</option>\r\n            {fetchedCountries.map((country, id) => <option key={id} value={country}>{country}</option>)}\r\n          </NativeSelect>\r\n      </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\n// import Cards from './components/Cards/Cards';\n// import Chart from './components/Chart/Chart';\n// import CountryPicker from './components/CountryPicker/CountryPicker';\nimport {Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\n\nimport { fetchData } from './api/';\nimport image from './images/image.png';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n  async componentDidMount(){\n        const fetchedData = await fetchData();\n        // console.log(fetchedData);\n      this.setState({ data : fetchedData })\n    }\n    handleCountryChange = async (country) => {\n      // console.log(country)\n      const fetchedData = await fetchData(country);\n      this.setState({ data: fetchedData, country: country});\n     console.log(fetchedData);\n  \n      // console.log(country);\n    }\n  render(){\n    const { data, country } = this.state;\n    return(\n      <div className={styles.container} >\n         <img className={styles.image} src={image} alt=\"COVID-19\" />\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__31WaE\",\"image\":\"App_image__3KYvy\"};"],"sourceRoot":""}